version: '3'

volumes:
  eventstore-data:
  redis-data:
  rabbitmq-logs:
  rabbitmq-data:
  elasticsearch:
  kibana:

services:
  service:
    container_name: "${PROJECT_NAME}_${AGGREGATE_ID}-${SERVICE_ENV}"
    restart: unless-stopped
    image: krixlion/go-reflex-dlv:${GO_VERSION}
    environment:
      - BUILD_ARGS=-race cmd/main.go
      - RUN_ARGS=-p ${GRPC_PORT}
      - DEBUG_PORT=${DEBUG_PORT}
      # - DELVE_ARGS=--continue
    ports:
      - ${GRPC_PORT}:${GRPC_PORT}
      - ${DEBUG_PORT}:${DEBUG_PORT}
    volumes:
      - .:/app
    depends_on:
      - eventstore
      - redis
      - rabbitmq
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 750M
        reservations:
          cpus: '0.25'
          memory: 20M
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        tag: httpd.access

  eventstore:
    image: eventstore/eventstore:22.10.0-buster-slim
    container_name: eventstore
    restart: unless-stopped
    environment:
      - EVENTSTORE_CLUSTER_SIZE=1
      - EVENTSTORE_RUN_PROJECTIONS=All
      - EVENTSTORE_START_STANDARD_PROJECTIONS=true
      - EVENTSTORE_HTTP_PORT=${DB_WRITE_PORT}
      - EVENTSTORE_INSECURE=true
      - EVENTSTORE_ENABLE_ATOM_PUB_OVER_HTTP=true
      # - EVENTSTORE_ENABLE_EXTERNAL_TCP=true
      # - EVENTSTORE_EXT_TCP_PORT=1113
    ports:
    # HTTP, gRPC port
      - "${DB_WRITE_PORT}:${DB_WRITE_PORT}"
    volumes:
        - eventstore-data:/var/lib/eventstore
    deploy:
      resources:
        limits:
          cpus: '0.75'
          memory: 500M
        reservations:
          cpus: '0.25'
          memory: 20M
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        tag: httpd.access

  redis:
    image: redis:7.0.5-alpine
    container_name: redis
    restart: unless-stopped
    command: redis-server  --port ${DB_READ_PORT} #/usr/local/etc/redis/redis.conf
    ports:
      - ${DB_READ_PORT}:${DB_READ_PORT}
    volumes:
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
      - redis-data:/data
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 100M
        reservations:
          cpus: '0.25'
          memory: 10M
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        tag: httpd.access

  rabbitmq:
    image: rabbitmq:3.11.3-alpine
    container_name: rabbitmq
    restart: unless-stopped
    ports:
    # AMQP port
    - 5672:5672
    # HTTP port
    - 15672:15672
    volumes:
    - rabbitmq-data:/var/lib/rabbitmq/
    - rabbitmq-logs:/var/log/rabbitmq
    deploy:
      resources:
        limits:
          cpus: '0.75'
          memory: 200M
        reservations:
          cpus: '0.25'
          memory: 20M
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        tag: httpd.access


# ----------------------------- Instrumentation -----------------------------
  otel-collector:
    image: otel/opentelemetry-collector:0.67.0
    container_name: otel-collector
    restart: unless-stopped
    command: ["--config=/etc/otel-collector-config.yaml"]
    ports:
      # - "1888:1888"   # pprof extension
      # - "8888:8888"   # Prometheus metrics exposed by the collector
      # - "8889:8889"   # Prometheus exporter metrics
      # - "13133:13133" # health_check extension
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP http receiver
      - "8889:8889"
      # - "55679:55679" # zpages extension
    volumes:
      - ./config/otel/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 50M
        reservations:
          cpus: '0.25'
          memory: 10M
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        tag: httpd.access

  fluentd:
    build:
      context: .
      dockerfile: Dockerfile.fluentd
    container_name: fluentd
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    volumes:
      - ./config/otel/fluent.conf:/fluentd/etc/fluent.conf
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 80M
        reservations:
          cpus: '0.1'
          memory: 20M

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    container_name: elasticsearch
    environment:
      discovery.type: 'single-node'
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      xpack.security.enabled: false
      xpack.security.enrollment.enabled: false
    volumes:
      - elasticsearch:/usr/share/elasticsearch/data
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 700M
        reservations:
          cpus: '0.25'
          memory: 20M
          
  kibana:
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    container_name: kibana
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=admin
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
    volumes:
      - kibana:/usr/share/kibana/data
    depends_on:
      - elasticsearch
    deploy:
      resources:
        limits:
          cpus: '0.75'
          memory: 400M
        reservations:
          cpus: '0.25'
          memory: 20M

  jaeger:
    image: jaegertracing/all-in-one:1.40
    container_name: jeager
    volumes:
      - "./config/otel/jaeger-ui.json:/etc/jaeger/jaeger-ui.json"
    command: --query.ui-config /etc/jaeger/jaeger-ui.json
    environment:
      - METRICS_STORAGE_TYPE=prometheus
      - PROMETHEUS_SERVER_URL=http://prometheus:9090
    ports:
      - "16686:16686"
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 40M
        reservations:
          cpus: '0.05'
          memory: 20M
  
  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.41.0
    volumes:
      - "./config/otel/prometheus.yml:/etc/prometheus/prometheus.yml"
    ports:
      - "9090:9090"
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 40M
        reservations:
          cpus: '0.05'
          memory: 20M

  grafana:
    image: grafana/grafana:9.3.2
    container_name:  grafana
    volumes:
      - ./config/otel/grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./config/otel/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yaml
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    ports:
      - 3000:3000
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 75M
        reservations:
          cpus: '0.05'
          memory: 20M